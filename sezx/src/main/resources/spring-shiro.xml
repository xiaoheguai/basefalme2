<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<description>== Shiro Components ==</description>
	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--cookie的name，我故意取名叫xxxxbaidu -->
		<constructor-arg value="quella-cookie"/>
		<property name="httpOnly" value="true"/>
		<!--cookie的有效时间 -->
		<property name="maxAge" value="-1"/>
		<!-- 配置存储Session Cookie的domain为 一级域名
        <property name="domain" value=""/>
         -->
	</bean>
	<!-- 用户信息记住我功能的相关配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="quella-re-cookie"/>
		<property name="httpOnly" value="true"/>
		<!-- 配置存储rememberMe Cookie的domain为 一级域名
        <property name="domain" value=""/>
         -->
		<property name="maxAge" value="2592000"/><!-- 30天时间，记住我30天 -->
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
		<property name="cipherKey"
				  value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
		<property name="cookie" ref="rememberMeCookie"/>
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--<property name="realms">-->
				<!--<util:list>-->
					<!--<ref bean="sampleRealm"></ref>-->
					<!--<ref bean="msampleRealm"></ref>-->
				<!--</util:list>-->
		<!--</property>-->
		<!-- filter&realm绑定 登陆-->
		<property name="authenticator" ref="DefineModularRealmAuthenticator" />
		<!-- filter&realm绑定 角色权限验证 -->
		<property name="authorizer" ref="DefineModularRealmAuthorizer"/>
		<property name="sessionManager" ref="sessionManager"/>
		<property name="rememberMeManager" ref="rememberMeManager"/>
		<property name="cacheManager" ref="customShiroCacheManager"/>
	</bean>

	<!-- 授权 认证 -->
	<bean id="sampleRealm" class="com.ssrs.core.shiro.token.SampleRealm" >

	</bean>
	<bean id="msampleRealm" class="com.ssrs.controller.reception.token.MSampleRealm" >

	</bean>

	<!-- Session Manager begin-->

	<!-- custom shiro session listener -->
	<bean id="customSessionListener" class="com.ssrs.core.shiro.listenter.CustomSessionListener">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	</bean>
	<!-- custom shiro session dao -->
	<bean id="customShiroSessionDAO" class="com.ssrs.core.shiro.session.CustomShiroSessionDAO">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="interval" value="${session.validate.timespan}"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 相隔多久检查一次session的有效性   -->
		<property name="sessionValidationInterval" value="${session.validate.timespan}"/>
		<!-- session 有效时间为半小时 （毫秒单位）-->
		<property name="globalSessionTimeout" value="${session.timeout}"/>
		<property name="sessionDAO" ref="customShiroSessionDAO"/>
		<!-- session 监听，可以多个。 -->
		<property name="sessionListeners">
			<list>
				<ref bean="customSessionListener"/>
			</list>
		</property>
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 是否删除无效的，默认也是开启 -->
		<property name="deleteInvalidSessions" value="true"/>
		<!-- 会话Cookie模板 -->
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	<!-- Session Manager end-->

	<!--shiro cacheManger begin-->
	<!-- 用户缓存 -->
	<bean id="customShiroCacheManager" class="com.ssrs.core.shiro.cache.impl.CustomShiroCacheManager">
		<property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
	</bean>
	<!-- shiro 缓存实现，对ShiroCacheManager，我是采用redis的实现 -->
	<bean id="jedisShiroCacheManager" class="com.ssrs.core.shiro.cache.impl.JedisShiroCacheManager">
		<property name="jedisManager" ref="jedisManager"/>
	</bean>
	<!--end-->


	<!--jedis being-->

	<!-- session 创建、删除、查询 -->
	<bean id="jedisShiroSessionRepository" class="com.ssrs.core.shiro.session.JedisShiroSessionRepository" >
		<property name="jedisManager" ref="jedisManager"/>
	</bean>

	<!-- redis 的缓存 -->
	<bean id="jedisManager" class="com.ssrs.core.shiro.cache.JedisManager">
		<property name="jedisPool" ref="jedisPool"/>
	</bean>


	<!--
		自定义角色过滤器 支持多个角色可以访问同一个资源 eg:/home.jsp = authc,roleOR[admin,user]
		用户有admin或者user角色 就可以访问
	-->

	<!-- 认证数据库存储-->
	<bean id="shiroManager" class="com.ssrs.core.shiro.service.impl.ShiroManagerImpl"/>
	<!-- filter&realm绑定 -->
	<!--认证解释器-->
	<bean id="DefineModularRealmAuthenticator"
		  class="com.ssrs.core.shiro.token.DefineModularRealmAuthenticator">
		<property name="defineRealms">
			<map>
				<entry key="u_login" value-ref="sampleRealm"></entry>
				<entry key="m_login" value-ref="msampleRealm" />
			</map>
		</property>
	</bean>

	<!--授权解释器-->
	<bean id="DefineModularRealmAuthorizer"

		  class="com.ssrs.core.shiro.token.DefineModularRealmAuthorizer">

		<property name="defineRealms">
			<map>
				<entry key="u_login" value-ref="sampleRealm"></entry>
				<entry key="m_login" value-ref="msampleRealm" />
			</map>
		</property>

	</bean>


<bean id="login" class="com.ssrs.core.shiro.filter.LoginFilter">
<property name="loginUrl" value="/u/login"></property>
<property name="successUrl" value="/"></property>
</bean>
<bean id="Mlogin" class="com.ssrs.core.shiro.filter.LoginFilter">
<property name="loginUrl" value="/m/login"></property>
<property name="successUrl" value="/m/index"></property>
</bean>
<bean id="role" class="com.ssrs.core.shiro.filter.RoleFilter"/>
<bean id="permission" class="com.ssrs.core.shiro.filter.PermissionFilter"/>
<bean id="simple" class="com.ssrs.core.shiro.filter.SimpleAuthFilter"/>
<!-- session 校验单个用户是否多次登录 -->
	<bean id="kickoutSessionFilter"   class="com.ssrs.core.shiro.filter.KickoutSessionFilter">
		<!--<property name="kickoutUrl" value="/u/login?kickout"/>-->
	</bean>
	<!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
		<!--<property name="staticMethod" value="com.ssrs.core.shiro.filter.KickoutSessionFilter.setKickoutUrl"/>-->
		<!--<property name="arguments" value="/open/kickout?kickout"/>-->
	<!--</bean>-->
	<!-- 静态注入 jedisShiroSessionRepository-->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="com.ssrs.core.shiro.filter.KickoutSessionFilter.setShiroSessionRepository"/>
		<property name="arguments" ref="jedisShiroSessionRepository"/>
	</bean>

	<!--shiro过滤器的一些配置-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!--<property name="loginUrl" value="/u/login" />-->
		<!--&lt;!&ndash;	TODO 待提取	&ndash;&gt;-->
		<!--<property name="successUrl" value="/" />-->
		<property name="unauthorizedUrl" value="/open/unauthorized" />

		<!--	初始配置，现采用自定义	-->
				<!--<property name="filterChainDefinitions" >-->
					<!--<value>-->
						<!--/** = anon-->
						<!--/page/login.jsp = anon-->
						<!--/page/register/* = anon-->
						<!--/page/index.jsp = authc-->
						<!--/page/addItem* = authc,roles[数据管理员]-->
						<!--/page/file* = authc,roleOR[普通用户,数据管理员]-->
						<!--/page/listItems* = authc,roleOR[数据管理员,普通用户]-->
						<!--/page/showItem* = authc,roleOR[数据管理员,普通用户]-->
						<!--/page/updateItem*=authc,roles[数据管理员]-->
		            <!--</value>-->
				<!--</property>-->
		<!-- 读取初始自定义权限内容-->
		<property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/>
		<property name="filters">
			<util:map>
				<entry key="u_login" value-ref="login"></entry>
				<entry key="m_login" value-ref="Mlogin"></entry>
				<entry key="role" value-ref="role"></entry>
				<entry key="simple" value-ref="simple"></entry>
				<entry key="permission" value-ref="permission"></entry>
				<entry key="kickout" value-ref="kickoutSessionFilter"></entry>
			</util:map>
		</property>
	</bean>

	<!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
		<property name="arguments" ref="securityManager"/>
	</bean>
	<!-- Shiro生命周期处理器-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- ============================================================================ -->


	<!--自定义的一些操作-->
	<!-- 手动操作Session，管理Session -->
	<bean id="customSessionManager" class="com.ssrs.core.shiro.session.CustomSessionManager">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
		<property name="customShiroSessionDAO" ref="customShiroSessionDAO"/>
	</bean>
</beans>

